name: Continuous Deployment Pipeline

on:     #
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  # Job 1 : Création des fichier d'environement et constuction/push(depot) de l'image django sur docker hub  
  create-depot-env-file-Docker-image:
    runs-on: ubuntu-latest  #parceque le serveur est sur ubuntu; 
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2      #telecharger le code sur le serveur ubuntu de gitaction
# env file for django app
      - name: Create .env.prod file  #le fichier qui contient variables d'environnement que l'app va utiliser
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env.prod 
          echo "DEBUG=${{ secrets.DEBUG }}" >> .env.prod
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env.prod
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env.prod
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env.prod
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env.prod
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env.prod
# env file for docker compose
      - name: Create .env file                     #run est une instruction linux qui va nous permettre de 
        run: |
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env     
# envoie des fichier neccesaire pour demarer les conteneur sur le serveur
      - name: Upload docker-compose.yml and env file in server  #yml va lancer les conteneurs,les env vont fournirs lesidentifiants pour construire et demarrer les conteneurs
        uses: appleboy/scp-action@master             #instruction qui permet dutiliser les actions gitaction; cet action permet de copier 
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_SSH_KEY }}
          source: "docker-compose.yml, .env.prod, .env"      #ces fics st sur ubuntu de gitaction
          target: '/home/ubuntu/victor-memoire'             #copier vers le serveur aws


# copie du fichier .env.prod necessaire pour l'app django dans le repertoire memoire/
      - name: copy env file
        run: sudo mv .env.prod memoire/   #deplace le fic dans le reper memoire c sur gitaction
# connection au registry docker hub pour deposer l'image 
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASS }}
      # Étape 3 : Construire l'image Docker de l'application
      - name: Build the Docker image          #le
        run: docker build -t eliejah426/memoiretest1:latest1 .

      # Étape 5 : Pousser l'image Docker sur Docker Hub
      - name: Push Docker image
        run: docker push eliejah426/memoiretest1:latest1





  # Job 2 : Déploiement de l'Application sur le Serveur
  deploy-application:
    # needs: [push-code]
    needs: [create-depot-env-file-Docker-image]
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Connexion SSH pour déployer l'application
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Deploy the application
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_SSH_KEY }}
          port: 22
          script: |
            cd /home/ubuntu/victor-memoire    #deplacer ds ce dossier
            sudo docker pull eliejah426/memoiretest1:latest1    #telecharger le conteneur de dochub sur aws
            sudo docker compose -f docker-compose.yml down      #eteindre les conteneur doccompose
            sudo docker compose -f docker-compose.yml up -d       #rallumer les conteneurs
            #sudo rm .env                                    #raisons de securité
            #sudo rm .env.prod
          